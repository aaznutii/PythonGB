-- создание процедуры для внесения данных об обучающихся с разнесением по таблицам. Сводные данные загружаются из листа эксель и передаются программно в процедуру

DROP PROCEDURE IF EXISTS insert_student;
DESC PROFILES_STUDENTS ;
DELIMITER //
CREATE PROCEDURE insert_student(first_name varchar(100), last_name varchar(100), patronymic varchar(100), mail varchar(100), phone varchar(100), snils varchar(20), 
        gender varchar(2), birthday date, address int unsigned, citizenship varchar(20), disabled tinyint(1), legal_age tinyint(1), condition_status varchar(20), 
        prof_status varchar(20), place varchar(50), change_last_name varchar(100), change_first_name varchar(100), change_patronymic varchar(100), doc_change_name varchar(100))
     begin
        insert into STUDENTS (first_name, last_name, patronymic, email, phone, snils) 
        values (first_name, first_name, patronymic, mail, phone, snils);
        insert into PROFILES_STUDENTS (gender, birthday, address_id, citizenship, disabled, legal_age, condition_status, 
                    prof_status, place, change_last_name, change_first_name, change_patronymic, doc_change_name) 
        values (gender, birthday, address_id, citizenship, disabled, legal_age, condition_status, 
                prof_status, place, change_last_name, change_first_name, change_patronymic, doc_change_name);
     end//
DELIMITER ;


-- Эмуляция внешнего ключа для полей contragent_id, contragent_id таблицы contragent
-- создание функции для получения наименования контрагента

DROP FUNCTION IF EXISTS get_contragent;

DELIMITER //
CREATE FUNCTION get_contragent (contragent_id INT, contragent_type VARCHAR(50))
RETURNS VARCHAR(255) NOT DETERMINISTIC READS SQL DATA

BEGIN
  CASE contragent_type
    WHEN 'contragents_persons' THEN
      RETURN (SELECT CONCAT_WS(' ', FIRST_NAME, LAST_NAME, PATRONYMIC)  FROM contragents_persons WHERE id = contragent_id);
    WHEN 'contragents_organizations' THEN 
      RETURN (SELECT organization_name FROM contragents_organizations WHERE id = contragent_id);
      RETURN FALSE;
  END CASE;
END//

DELIMITER ;


-- создание функции для проверки  содержания type_contragents

DROP FUNCTION IF EXISTS is_row_exists;
DELIMITER //

CREATE FUNCTION is_row_exists (contragent_id INT, contragent_type VARCHAR(50))
RETURNS BOOLEAN READS SQL DATA

BEGIN
  CASE contragent_type
    WHEN 'contragents_persons' THEN
      RETURN EXISTS(SELECT 1 FROM contragents_persons WHERE id = contragent_id);
    WHEN 'contragents_organizations' THEN 
      RETURN EXISTS(SELECT 1 FROM contragents_organizations WHERE id = contragent_id);
      RETURN FALSE;
  END CASE;
END//

DELIMITER ;

SELECT is_row_exists(1, 'contragents_organizations');

-- Создадим триггер для проверки валидности contragent_id и type_contragents
 
DROP TRIGGER IF EXISTS contragents_validation;

DELIMITER //

CREATE TRIGGER contragents_validation BEFORE INSERT ON contragents

FOR EACH ROW BEGIN
  IF NOT is_row_exists(NEW.contragent_id, NEW.contragent_type) THEN
    SIGNAL SQLSTATE "45000"
    SET MESSAGE_TEXT = "Error adding contragent! Target table doesn't contain row id provided!";
  END IF;
END//

DELIMITER ;

-- Создаем тригер для автозаполнения столба full_number
DROP TRIGGER IF EXISTS insert_full_number;

DELIMITER //
CREATE TRIGGER insert_full_number BEFORE INSERT ON CONTRACTS
FOR EACH ROW BEGIN
    SET NEW.full_number = CONCAT_WS('-', NEW.type_program, NEW.doc_number, NEW.department_id);
END//

DELIMITER ;


-- Создаем тригер для автоматического создания записи в таблице previous_education после создания записи в students
DROP TRIGGER IF EXISTS creat_previous_education;

DELIMITER //
CREATE TRIGGER creat_previous_education AFTER INSERT ON students
FOR EACH ROW BEGIN 
    INSERT INTO PREVIOUS_EDUCATION(student_id) VALUES (NEW.id) ;
END//

DELIMITER ;


-- проверка
INSERT INTO STUDENTS (last_name, first_name, patronymic, email, phone, snils, contract_id, educational_groups_id)
VALUES ('Ивнов', 'Иван', 'Иванович', 'ivanov@example.ru', '+7988 00 00', '145-7825-256-08', 26, 15);

SELECT * FROM PREVIOUS_EDUCATION WHERE STUDENT_ID = (SELECT STUDENTS.ID FROM STUDENTS WHERE last_name = 'Ивнов');

-- создание тригера для суммирования оплат по контрагенту и сохранения в столбец paid_in_totall

DELIMITER //
CREATE TRIGGER get_totall_paid AFTER INSERT ON PAYMENTS
FOR EACH ROW BEGIN 
    UPDATE CONTRACTS SET paid_in_totall = SUM(PAYMENTS.payment) 
    WHERE NEW.CONTRACTS_ID = CONTRACTS.ID;
END//

DELIMITER ;
             

